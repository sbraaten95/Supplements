{"version":3,"file":"okta.service.js","sources":["okta.service.js"],"names":[],"mappingssourcesContent":["\"use strict\";\n/*\n * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar router_1 = require(\"@angular/router\");\nvar configuration_validation_1 = require(\"@okta/configuration-validation\");\nvar okta_config_1 = require(\"../models/okta.config\");\nvar packageInfo_1 = require(\"../packageInfo\");\n/**\n * Import the okta-auth-js library\n */\nvar OktaAuth = require(\"@okta/okta-auth-js\");\nvar rxjs_1 = require(\"rxjs\");\nvar OktaAuthService = /** @class */ (function () {\n    function OktaAuthService(auth, router) {\n        var _this = this;\n        this.auth = auth;\n        this.router = router;\n        // Assert Configuration\n        configuration_validation_1.assertIssuer(auth.issuer);\n        configuration_validation_1.assertClientId(auth.clientId);\n        configuration_validation_1.assertRedirectUri(auth.redirectUri);\n        this.observers = [];\n        this.oktaAuth = new OktaAuth({\n            clientId: auth.clientId,\n            issuer: auth.issuer,\n            redirectUri: auth.redirectUri\n        });\n        this.oktaAuth.userAgent = packageInfo_1.default.name + \"/\" + packageInfo_1.default.version + \" \" + this.oktaAuth.userAgent;\n        /**\n         * Scrub scopes to ensure 'openid' is included\n         */\n        auth.scope = this.scrubScopes(auth.scope);\n        /**\n         * Cache the auth config.\n         */\n        this.config = auth;\n        this.$authenticationState = new rxjs_1.Observable(function (observer) { _this.observers.push(observer); });\n    }\n    /**\n     * Checks if there is an access token and id token\n     */\n    OktaAuthService.prototype.isAuthenticated = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var accessToken, idToken;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.getAccessToken()];\n                    case 1:\n                        accessToken = _a.sent();\n                        return [4 /*yield*/, this.getIdToken()];\n                    case 2:\n                        idToken = _a.sent();\n                        return [2 /*return*/, !!(accessToken || idToken)];\n                }\n            });\n        });\n    };\n    OktaAuthService.prototype.emitAuthenticationState = function (state) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                this.observers.forEach(function (observer) { return observer.next(state); });\n                return [2 /*return*/];\n            });\n        });\n    };\n    /**\n     * Returns the current accessToken in the tokenManager.\n     */\n    OktaAuthService.prototype.getAccessToken = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var accessToken, err_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, this.oktaAuth.tokenManager.get('accessToken')];\n                    case 1:\n                        accessToken = _a.sent();\n                        return [2 /*return*/, accessToken.accessToken];\n                    case 2:\n                        err_1 = _a.sent();\n                        // The user no longer has an existing SSO session in the browser.\n                        // (OIDC error `login_required`)\n                        // Ask the user to authenticate again.\n                        return [2 /*return*/, undefined];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Returns the current idToken in the tokenManager.\n     */\n    OktaAuthService.prototype.getIdToken = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var idToken, err_2;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, this.oktaAuth.tokenManager.get('idToken')];\n                    case 1:\n                        idToken = _a.sent();\n                        return [2 /*return*/, idToken.idToken];\n                    case 2:\n                        err_2 = _a.sent();\n                        // The user no longer has an existing SSO session in the browser.\n                        // (OIDC error `login_required`)\n                        // Ask the user to authenticate again.\n                        return [2 /*return*/, undefined];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Returns user claims from the /userinfo endpoint if an\n     * accessToken is provided or parses the available idToken.\n     */\n    OktaAuthService.prototype.getUser = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var accessToken, idToken, userinfo;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.oktaAuth.tokenManager.get('accessToken')];\n                    case 1:\n                        accessToken = _a.sent();\n                        return [4 /*yield*/, this.oktaAuth.tokenManager.get('idToken')];\n                    case 2:\n                        idToken = _a.sent();\n                        if (!(accessToken && idToken)) return [3 /*break*/, 4];\n                        return [4 /*yield*/, this.oktaAuth.token.getUserInfo(accessToken)];\n                    case 3:\n                        userinfo = _a.sent();\n                        if (userinfo.sub === idToken.claims.sub) {\n                            // Only return the userinfo response if subjects match to\n                            // mitigate token substitution attacks\n                            return [2 /*return*/, userinfo];\n                        }\n                        _a.label = 4;\n                    case 4: return [2 /*return*/, idToken ? idToken.claims : undefined];\n                }\n            });\n        });\n    };\n    /**\n     * Returns the configuration object used.\n     */\n    OktaAuthService.prototype.getOktaConfig = function () {\n        return this.config;\n    };\n    /**\n     * Launches the login redirect.\n     * @param fromUri\n     * @param additionalParams\n     */\n    OktaAuthService.prototype.loginRedirect = function (fromUri, additionalParams) {\n        if (fromUri) {\n            this.setFromUri(fromUri);\n        }\n        this.oktaAuth.token.getWithRedirect(__assign({ responseType: (this.config.responseType || 'id_token token').split(' '), \n            // Convert scopes to list of strings\n            scopes: this.config.scope.split(' ') }, additionalParams));\n    };\n    /**\n     * Stores the intended path to redirect after successful login.\n     * @param uri\n     * @param queryParams\n     */\n    OktaAuthService.prototype.setFromUri = function (uri, queryParams) {\n        var json = JSON.stringify({\n            uri: uri,\n            params: queryParams\n        });\n        localStorage.setItem('referrerPath', json);\n    };\n    /**\n     * Returns the referrer path from localStorage or app root.\n     */\n    OktaAuthService.prototype.getFromUri = function () {\n        var referrerPath = localStorage.getItem('referrerPath');\n        localStorage.removeItem('referrerPath');\n        var path = JSON.parse(referrerPath) || { uri: '/', params: {} };\n        var navigationExtras = {\n            queryParams: path.params\n        };\n        return {\n            uri: path.uri,\n            extras: navigationExtras\n        };\n    };\n    /**\n     * Parses the tokens from the callback URL.\n     */\n    OktaAuthService.prototype.handleAuthentication = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var tokens, fromUri;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.oktaAuth.token.parseFromUrl()];\n                    case 1:\n                        tokens = _a.sent();\n                        tokens.forEach(function (token) {\n                            if (token.idToken) {\n                                _this.oktaAuth.tokenManager.add('idToken', token);\n                            }\n                            if (token.accessToken) {\n                                _this.oktaAuth.tokenManager.add('accessToken', token);\n                            }\n                        });\n                        return [4 /*yield*/, this.isAuthenticated()];\n                    case 2:\n                        if (_a.sent()) {\n                            this.emitAuthenticationState(true);\n                        }\n                        fromUri = this.getFromUri();\n                        this.router.navigate([fromUri.uri], fromUri.extras);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Clears the user session in Okta and removes\n     * tokens stored in the tokenManager.\n     * @param uri\n     */\n    OktaAuthService.prototype.logout = function (uri) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        this.oktaAuth.tokenManager.clear();\n                        return [4 /*yield*/, this.oktaAuth.signOut()];\n                    case 1:\n                        _a.sent();\n                        this.emitAuthenticationState(false);\n                        this.router.navigate([uri || '/']);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Scrub scopes to ensure 'openid' is included\n     * @param scopes\n     */\n    OktaAuthService.prototype.scrubScopes = function (scopes) {\n        if (!scopes) {\n            return 'openid email';\n        }\n        if (scopes.indexOf('openid') === -1) {\n            return scopes + ' openid';\n        }\n        return scopes;\n    };\n    OktaAuthService.decorators = [\n        { type: core_1.Injectable },\n    ];\n    /** @nocollapse */\n    OktaAuthService.ctorParameters = function () { return [\n        { type: undefined, decorators: [{ type: core_1.Inject, args: [okta_config_1.OKTA_CONFIG,] },] },\n        { type: router_1.Router, },\n    ]; };\n    return OktaAuthService;\n}());\nexports.OktaAuthService = OktaAuthService;\n"]}