import { Router, NavigationExtras } from '@angular/router';
import { OktaConfig } from '../models/okta.config';
import { UserClaims } from '../models/user-claims';
import { Observable } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
export declare class OktaAuthService {
    private auth;
    private router;
    private oktaAuth;
    private config;
    private observers;
    $authenticationState: Observable<boolean>;
    constructor(auth: OktaConfig, router: Router);
    /**
     * Checks if there is an access token and id token
     */
    isAuthenticated(): Promise<boolean>;
    private emitAuthenticationState;
    /**
     * Returns the current accessToken in the tokenManager.
     */
    getAccessToken(): Promise<string | undefined>;
    /**
     * Returns the current idToken in the tokenManager.
     */
    getIdToken(): Promise<string | undefined>;
    /**
     * Returns user claims from the /userinfo endpoint if an
     * accessToken is provided or parses the available idToken.
     */
    getUser(): Promise<UserClaims | undefined>;
    /**
     * Returns the configuration object used.
     */
    getOktaConfig(): OktaConfig;
    /**
     * Launches the login redirect.
     * @param fromUri
     * @param additionalParams
     */
    loginRedirect(fromUri?: string, additionalParams?: object): void;
    /**
     * Stores the intended path to redirect after successful login.
     * @param uri
     * @param queryParams
     */
    setFromUri(uri: string, queryParams?: object): void;
    /**
     * Returns the referrer path from localStorage or app root.
     */
    getFromUri(): {
        uri: string;
        extras: NavigationExtras;
    };
    /**
     * Parses the tokens from the callback URL.
     */
    handleAuthentication(): Promise<void>;
    /**
     * Clears the user session in Okta and removes
     * tokens stored in the tokenManager.
     * @param uri
     */
    logout(uri?: string): Promise<void>;
    /**
     * Scrub scopes to ensure 'openid' is included
     * @param scopes
     */
    scrubScopes(scopes: string): string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<OktaAuthService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<OktaAuthService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2t0YS5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbIm9rdGEuc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJvdXRlciwgTmF2aWdhdGlvbkV4dHJhcyB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBPa3RhQ29uZmlnIH0gZnJvbSAnLi4vbW9kZWxzL29rdGEuY29uZmlnJztcbmltcG9ydCB7IFVzZXJDbGFpbXMgfSBmcm9tICcuLi9tb2RlbHMvdXNlci1jbGFpbXMnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgT2t0YUF1dGhTZXJ2aWNlIHtcbiAgICBwcml2YXRlIGF1dGg7XG4gICAgcHJpdmF0ZSByb3V0ZXI7XG4gICAgcHJpdmF0ZSBva3RhQXV0aDtcbiAgICBwcml2YXRlIGNvbmZpZztcbiAgICBwcml2YXRlIG9ic2VydmVycztcbiAgICAkYXV0aGVudGljYXRpb25TdGF0ZTogT2JzZXJ2YWJsZTxib29sZWFuPjtcbiAgICBjb25zdHJ1Y3RvcihhdXRoOiBPa3RhQ29uZmlnLCByb3V0ZXI6IFJvdXRlcik7XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIHRoZXJlIGlzIGFuIGFjY2VzcyB0b2tlbiBhbmQgaWQgdG9rZW5cbiAgICAgKi9cbiAgICBpc0F1dGhlbnRpY2F0ZWQoKTogUHJvbWlzZTxib29sZWFuPjtcbiAgICBwcml2YXRlIGVtaXRBdXRoZW50aWNhdGlvblN0YXRlO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGN1cnJlbnQgYWNjZXNzVG9rZW4gaW4gdGhlIHRva2VuTWFuYWdlci5cbiAgICAgKi9cbiAgICBnZXRBY2Nlc3NUb2tlbigpOiBQcm9taXNlPHN0cmluZyB8IHVuZGVmaW5lZD47XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgY3VycmVudCBpZFRva2VuIGluIHRoZSB0b2tlbk1hbmFnZXIuXG4gICAgICovXG4gICAgZ2V0SWRUb2tlbigpOiBQcm9taXNlPHN0cmluZyB8IHVuZGVmaW5lZD47XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB1c2VyIGNsYWltcyBmcm9tIHRoZSAvdXNlcmluZm8gZW5kcG9pbnQgaWYgYW5cbiAgICAgKiBhY2Nlc3NUb2tlbiBpcyBwcm92aWRlZCBvciBwYXJzZXMgdGhlIGF2YWlsYWJsZSBpZFRva2VuLlxuICAgICAqL1xuICAgIGdldFVzZXIoKTogUHJvbWlzZTxVc2VyQ2xhaW1zIHwgdW5kZWZpbmVkPjtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBjb25maWd1cmF0aW9uIG9iamVjdCB1c2VkLlxuICAgICAqL1xuICAgIGdldE9rdGFDb25maWcoKTogT2t0YUNvbmZpZztcbiAgICAvKipcbiAgICAgKiBMYXVuY2hlcyB0aGUgbG9naW4gcmVkaXJlY3QuXG4gICAgICogQHBhcmFtIGZyb21VcmlcbiAgICAgKiBAcGFyYW0gYWRkaXRpb25hbFBhcmFtc1xuICAgICAqL1xuICAgIGxvZ2luUmVkaXJlY3QoZnJvbVVyaT86IHN0cmluZywgYWRkaXRpb25hbFBhcmFtcz86IG9iamVjdCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogU3RvcmVzIHRoZSBpbnRlbmRlZCBwYXRoIHRvIHJlZGlyZWN0IGFmdGVyIHN1Y2Nlc3NmdWwgbG9naW4uXG4gICAgICogQHBhcmFtIHVyaVxuICAgICAqIEBwYXJhbSBxdWVyeVBhcmFtc1xuICAgICAqL1xuICAgIHNldEZyb21VcmkodXJpOiBzdHJpbmcsIHF1ZXJ5UGFyYW1zPzogb2JqZWN0KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSByZWZlcnJlciBwYXRoIGZyb20gbG9jYWxTdG9yYWdlIG9yIGFwcCByb290LlxuICAgICAqL1xuICAgIGdldEZyb21VcmkoKToge1xuICAgICAgICB1cmk6IHN0cmluZztcbiAgICAgICAgZXh0cmFzOiBOYXZpZ2F0aW9uRXh0cmFzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUGFyc2VzIHRoZSB0b2tlbnMgZnJvbSB0aGUgY2FsbGJhY2sgVVJMLlxuICAgICAqL1xuICAgIGhhbmRsZUF1dGhlbnRpY2F0aW9uKCk6IFByb21pc2U8dm9pZD47XG4gICAgLyoqXG4gICAgICogQ2xlYXJzIHRoZSB1c2VyIHNlc3Npb24gaW4gT2t0YSBhbmQgcmVtb3Zlc1xuICAgICAqIHRva2VucyBzdG9yZWQgaW4gdGhlIHRva2VuTWFuYWdlci5cbiAgICAgKiBAcGFyYW0gdXJpXG4gICAgICovXG4gICAgbG9nb3V0KHVyaT86IHN0cmluZyk6IFByb21pc2U8dm9pZD47XG4gICAgLyoqXG4gICAgICogU2NydWIgc2NvcGVzIHRvIGVuc3VyZSAnb3BlbmlkJyBpcyBpbmNsdWRlZFxuICAgICAqIEBwYXJhbSBzY29wZXNcbiAgICAgKi9cbiAgICBzY3J1YlNjb3BlcyhzY29wZXM6IHN0cmluZyk6IHN0cmluZztcbn1cbiJdfQ==